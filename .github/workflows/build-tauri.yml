name: Build Tauri App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v3

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Setup Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache Cargo registry and target
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Cache Cargo bin (tauri-cli)
      - name: Cache Cargo bin
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-tauri-cli
          restore-keys: |
            ${{ runner.os }}-cargo-bin-

      # Install dependencies
      - name: Install npm dependencies
        run: npm ci

      # Check/install Tauri CLI
      - name: Install Tauri CLI if not present
        shell: bash
        run: |
          if !(cargo tauri --version > /dev/null 2>&1); then
            cargo install tauri-cli
          fi

      # Generate a timestamp-based version
      - name: Set version from date
        id: version
        shell: bash
        run: echo "VERSION=$(date +'%Y-%m-%d-%H%M')" >> $GITHUB_ENV

      # Build the app
      - name: Build the app
        run: npm run tauri build

      # Find the MSI and zip it
      - name: Find and zip MSI
        id: find_msi
        shell: pwsh
        run: |
          $msi = Get-ChildItem -Path "src-tauri/target/release/bundle/msi" -Filter *.msi | Select-Object -First 1
          $zipPath = "$($msi.DirectoryName)\$($msi.BaseName).zip"
          Compress-Archive -Path $msi.FullName -DestinationPath $zipPath
          echo "ZIP_PATH=$zipPath" >> $env:GITHUB_ENV
          echo "ZIP_NAME=$($msi.BaseName).zip" >> $env:GITHUB_ENV

      # Create GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false

      # Upload versioned ZIP (e.g., wuwa_moma-2025-05-26-1530.zip)
      - name: Upload ZIP to Release (versioned)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_PATH }}
          asset_name: ${{ env.ZIP_NAME }}
          asset_content_type: application/zip

      # Upload static 'wuwa_moma.zip' that always points to latest
      - name: Upload ZIP to Release (wuwa_moma.zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_PATH }}
          asset_name: wuwa_moma.zip
          asset_content_type: application/zip

name: Build Tauri App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v3

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Setup Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache Rust dependencies
      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Install Tauri CLI
      - name: Install Tauri CLI
        run: cargo install tauri-cli

      # Extract version from package.json
      - name: Get app version
        id: version
        shell: bash
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      # Build the Tauri app
      - name: Build the app
        run: npm run tauri build

      # Find the generated .msi (PowerShell-compatible)
      - name: Find MSI
        id: find_msi
        shell: pwsh
        run: |
          $msi = Get-ChildItem -Path "src-tauri/target/release/bundle/msi" -Filter *.msi | Select-Object -First 1
          echo "MSI_PATH=$($msi.FullName)" >> $env:GITHUB_ENV
          echo "MSI_NAME=$($msi.Name)" >> $env:GITHUB_ENV

      # Create GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false

      # Upload the MSI to the release
      - name: Upload MSI to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.MSI_PATH }}
          asset_name: ${{ env.MSI_NAME }}
          asset_content_type: application/x-msi
